{"version":3,"sources":["LoadButton.module.scss","constants.ts","store.ts","util.ts","charts/LineChart.tsx","StreamEditor.tsx","Editor.tsx","services/loaders/GPXLoader.ts","LoadButton.tsx","SaveButton.tsx","App.tsx","index.tsx"],"names":["module","exports","STREAM_TYPES","COLORS","ACTIVITY_TYPE","useStore","create","set","files","name","type","streams","cadence","enabledFiles","aggregation","coordinate","elevation","heartrate","power","setName","setType","addFile","data","state","id","nanoid","addFileToStream","streamType","length","readFileAsString","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","LineChart","timestamps","uniq","flatMap","map","d","timestamp","firstTimestamp","Math","min","t","Object","fromEntries","value","find","undefined","filter","s","style","width","height","ResponsiveContainer","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","dataMax","ceil","allowDecimals","tickFormatter","YAxis","Tooltip","labelFormatter","minutesInput","totalSeconds","floor","hours","minutes","seconds","toString","padStart","formatTime","formatter","round","Legend","fileIndex","Line","isAnimationActive","dot","stroke","StreamEditor","filesWithType","Card","CardContent","FormGroup","row","FormControlLabel","control","Checkbox","label","Typography","variant","gutterBottom","component","names","Editor","fileCount","Stack","spacing","direction","TextField","placeholder","onChange","e","target","size","Select","entries","typeId","MenuItem","options","arrayMode","ignoreAttributes","attributeNamePrefix","parseAttributeValue","loadGPXFile","a","fileData","xml","parseXml","trk","gpx","trackPoints","trkseg","trkpt","getStream","getCoordinateFromTrackPoint","getCadenceFromTrackPoint","getElevationFromTrackPoint","getHeartRateFromTrackPoint","getPowerFromTrackPoint","getter","range","i","trackPoint","getUnixTime","parseISO","time","extensions","lat","lon","ele","LoadButton","addGPXData","inputRef","useRef","handleFileChange","event","parseFile","gpxData","console","error","accept","ref","multiple","className","styles","Input","Button","onClick","current","click","endsWith","Error","SaveButton","sortBy","stream","obj","join","metadata","formatISO","builder","end","pretty","createXML","FileSaver","saveAs","Blob","slugify","App","AppBar","position","sx","mb","Toolbar","Container","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.c962e086.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"LoadButton_Input__2BOF0\"};","import { StreamType } from \"./types\";\n\nexport const STREAM_TYPES: StreamType[] = [\n  \"heartrate\",\n  \"power\",\n  \"cadence\",\n  \"elevation\",\n  \"coordinate\",\n];\n\nexport const COLORS = [\n  \"#F44336\",\n  \"#9C27B0\",\n  \"#3F51B5\",\n  \"#03A9F4\",\n  \"#009688\",\n  \"#8BC34A\",\n  \"#FFEB3B\",\n  \"#FF9800\",\n  \"#795548\",\n  \"#607D8B\",\n  \"#E91E63\",\n  \"#673AB7\",\n  \"#2196F3\",\n  \"#00BCD4\",\n  \"#4CAF50\",\n  \"#CDDC39\",\n  \"#FFC107\",\n  \"#FF5722\",\n  \"#9E9E9E\",\n];\n\nexport const ACTIVITY_TYPE = {\n  0: \"Activity\",\n  1: \"Ride\",\n  2: \"Alpine Ski\",\n  3: \"Backcountry Ski\",\n  4: \"Hike\",\n  5: \"Ice Skate\",\n  6: \"Inline Skate\",\n  7: \"Nordic Ski\",\n  8: \"Roller Ski\",\n  9: \"Run\",\n  10: \"Walk\",\n  11: \"Workout\",\n  12: \"Snowboard\",\n  13: \"Snowshoe\",\n  14: \"Kitesurf\",\n  15: \"Windsurf\",\n  16: \"Swim\",\n  17: \"Virtual Ride\",\n  18: \"E-Bike Ride\",\n  19: \"Velomobile\",\n  21: \"Canoe\",\n  22: \"Kayaking\",\n  23: \"Rowing\",\n  24: \"Stand Up Paddling\",\n  25: \"Surfing\",\n  26: \"Crossfit\",\n  27: \"Elliptical\",\n  28: \"Rock Climb\",\n  29: \"Stair-Stepper\",\n  30: \"Weight Training\",\n  31: \"Yoga\",\n  51: \"Handcycle\",\n  52: \"Wheelchair\",\n  53: \"Virtual Run\",\n};\n","import create from \"zustand\";\nimport { GPXData, StreamType } from \"./types\";\nimport { nanoid } from \"nanoid\";\n\ninterface State {\n  streams: {\n    [type in StreamType]: {\n      enabledFiles: string[];\n      aggregation: \"average\";\n    };\n  };\n\n  files: Array<{ id: string } & GPXData>;\n  addFile: (data: GPXData) => void;\n\n  name: string;\n  setName: (name: string) => void;\n\n  type: number;\n  setType: (type: number) => void;\n}\n\nexport const useStore = create<State>((set) => ({\n  files: [],\n  name: \"\",\n  type: 0,\n  streams: {\n    cadence: {\n      enabledFiles: [],\n      aggregation: \"average\",\n    },\n    coordinate: {\n      enabledFiles: [],\n      aggregation: \"average\",\n    },\n    elevation: {\n      enabledFiles: [],\n      aggregation: \"average\",\n    },\n    heartrate: {\n      enabledFiles: [],\n      aggregation: \"average\",\n    },\n    power: {\n      enabledFiles: [],\n      aggregation: \"average\",\n    },\n  },\n  setName: (name: string) => set(() => ({ name })),\n  setType: (type: number) => set(() => ({ type })),\n  addFile: (data: GPXData) =>\n    set((state) => {\n      const id = nanoid();\n\n      const addFileToStream = (streamType: StreamType) => ({\n        ...state.streams[streamType],\n        enabledFiles: [...state.streams[streamType].enabledFiles, id],\n      });\n\n      return {\n        name: state.files.length === 0 ? data.name : state.name,\n        type: state.files.length === 0 ? data.type : state.type,\n        files: [...state.files, { ...data, id }],\n        streams: {\n          cadence: addFileToStream(\"cadence\"),\n          coordinate: addFileToStream(\"coordinate\"),\n          elevation: addFileToStream(\"elevation\"),\n          heartrate: addFileToStream(\"heartrate\"),\n          power: addFileToStream(\"power\"),\n        },\n      };\n    }),\n}));\n","export function readFileAsString(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsText(file);\n  });\n}\n\nexport function formatTime(minutesInput: number): string {\n  const totalSeconds = Math.floor(minutesInput * 60);\n\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds - hours * 3600) / 60);\n  const seconds = totalSeconds - hours * 3600 - minutes * 60;\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${seconds\n      .toString()\n      .padStart(2, \"0\")}h`;\n  } else if (minutes > 0) {\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}min`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n","import {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart as LineChartComponent,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { COLORS } from \"../constants\";\nimport { GPXData, StreamType } from \"../types\";\nimport uniq from \"lodash/uniq\";\nimport { formatTime } from \"../util\";\n\ninterface Props {\n  files: Array<GPXData & { id: string }>;\n  type: StreamType;\n}\n\nexport function LineChart({ files, type }: Props) {\n  const timestamps = uniq(\n    files.flatMap((file) => file[type]!.data.map((d) => d.timestamp))\n  );\n\n  const firstTimestamp = Math.min(...timestamps);\n\n  const data = timestamps.map((t) => ({\n    timestamp: (t - firstTimestamp) / 60,\n\n    ...Object.fromEntries(\n      files\n        .map((file) => {\n          // @ts-ignore\n          const value = file[type]!.data.find((d) => d.timestamp === t)?.value;\n          if (value !== undefined) {\n            return [file.id, value];\n          }\n\n          return null;\n        })\n        .filter((s): s is any[] => s !== null)\n    ),\n  }));\n\n  return (\n    <div style={{ width: \"100%\", height: 300 }}>\n      <ResponsiveContainer>\n        <LineChartComponent\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"timestamp\"\n            type=\"number\"\n            domain={[\"dataMin\", (dataMax: number) => Math.ceil(dataMax)]}\n            allowDecimals={false}\n            tickFormatter={(timestamp) => `${timestamp}min`}\n          />\n          <YAxis\n            domain={[\"dataMin\", \"dataMax\"]}\n            type=\"number\"\n            allowDecimals={false}\n          />\n          <Tooltip\n            labelFormatter={(value: number) => formatTime(value)}\n            formatter={(value: number) => Math.round(value)}\n          />\n          <Legend />\n          {files.map((file, fileIndex) => (\n            <Line\n              key={file.id}\n              type=\"monotone\"\n              dataKey={file.id}\n              isAnimationActive={false}\n              dot={false}\n              stroke={COLORS[fileIndex % COLORS.length]}\n              name={file.name}\n            />\n          ))}\n        </LineChartComponent>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","import {\n  Card,\n  CardContent,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  Typography,\n} from \"@mui/material\";\nimport { LineChart } from \"./charts/LineChart\";\nimport { useStore } from \"./store\";\nimport { StreamType } from \"./types\";\n\ninterface Props {\n  type: StreamType;\n}\n\nexport function StreamEditor({ type }: Props) {\n  const files = useStore((s) => s.files);\n\n  const filesWithType = files.filter((file) => file[type]);\n\n  if (filesWithType.length === 0) {\n    return null;\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <FormGroup aria-label=\"position\" row>\n          {filesWithType.map((file) => (\n            <FormControlLabel\n              key={file.id}\n              value={file.id}\n              control={<Checkbox />}\n              label={file.name}\n            />\n          ))}\n        </FormGroup>\n        <Typography variant=\"h5\" gutterBottom component=\"div\">\n          {names[type]}\n        </Typography>\n        <LineChart files={filesWithType} type={type} />\n      </CardContent>\n    </Card>\n  );\n}\n\nconst names: { [type in StreamType]: string } = {\n  cadence: \"Cadence\",\n  elevation: \"elevation\",\n  heartrate: \"Heart Rate\",\n  power: \"Power\",\n  coordinate: \"Map\",\n};\n","import {\n  Card,\n  CardContent,\n  MenuItem,\n  Select,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport React from \"react\";\nimport { ACTIVITY_TYPE, STREAM_TYPES } from \"./constants\";\nimport { useStore } from \"./store\";\nimport { StreamEditor } from \"./StreamEditor\";\n\nexport function Editor() {\n  const fileCount = useStore((state) => state.files.length);\n  const [name, setName] = useStore((s) => [s.name, s.setName]);\n  const [type, setType] = useStore((s) => [s.type, s.setType]);\n\n  if (fileCount === 0) {\n    return null;\n  }\n\n  return (\n    <Stack spacing={2} direction=\"column\">\n      <Card>\n        <CardContent>\n          <Stack spacing={1} direction=\"row\">\n            <TextField\n              placeholder=\"Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              size=\"small\"\n            />\n            <Select\n              value={type}\n              onChange={(e) => setType(e.target.value as number)}\n              size=\"small\"\n            >\n              {Object.entries(ACTIVITY_TYPE).map(([typeId, type]) => (\n                <MenuItem key={typeId} value={typeId}>\n                  {type}\n                </MenuItem>\n              ))}\n            </Select>\n          </Stack>\n        </CardContent>\n      </Card>\n\n      {STREAM_TYPES.filter((t) => t !== \"coordinate\").map((type) => (\n        <StreamEditor type={type} key={type} />\n      ))}\n    </Stack>\n  );\n}\n","import { BaseStream, GPXData, StreamType } from \"../../types\";\nimport { readFileAsString } from \"../../util\";\nimport { parse as parseXml, X2jOptionsOptional } from \"fast-xml-parser\";\nimport parseISO from \"date-fns/parseISO\";\nimport getUnixTime from \"date-fns/getUnixTime\";\nimport range from \"lodash/range\";\n\nconst options: X2jOptionsOptional = {\n  arrayMode: true,\n  ignoreAttributes: false,\n  attributeNamePrefix: \"\",\n  parseAttributeValue: true,\n};\n\nexport async function loadGPXFile(file: File): Promise<GPXData> {\n  const fileData = await readFileAsString(file);\n  const xml = parseXml(fileData, options);\n\n  const trk = xml.gpx[0].trk[0];\n  const trackPoints: any[] = trk.trkseg[0].trkpt;\n\n  return {\n    name: trk.name,\n    type: trk.type,\n    coordinate: getStream<[number, number], \"coordinate\">(\n      trackPoints,\n      \"coordinate\",\n      getCoordinateFromTrackPoint\n    ),\n    cadence: getStream<number, \"cadence\">(\n      trackPoints,\n      \"cadence\",\n      getCadenceFromTrackPoint\n    ),\n    elevation: getStream<number, \"elevation\">(\n      trackPoints,\n      \"elevation\",\n      getElevationFromTrackPoint\n    ),\n    heartrate: getStream<number, \"heartrate\">(\n      trackPoints,\n      \"heartrate\",\n      getHeartRateFromTrackPoint\n    ),\n    power: getStream<number, \"power\">(\n      trackPoints,\n      \"power\",\n      getPowerFromTrackPoint\n    ),\n  };\n}\n\nfunction getStream<StreamValue, Type extends StreamType, TrackPoint = any>(\n  trackPoints: TrackPoint[],\n  type: Type,\n  getter: (trackPoint: TrackPoint) => any\n): BaseStream<Type, StreamValue> {\n  return {\n    type: type,\n    data: range(0, trackPoints.length).map((i) => ({\n      timestamp: getTimestampFromTrackPoint(trackPoints[i]),\n      value: getter(trackPoints[i]),\n    })),\n  };\n}\n\nfunction getTimestampFromTrackPoint(trackPoint: any): number {\n  return getUnixTime(parseISO(trackPoint.time));\n}\n\nfunction getHeartRateFromTrackPoint(trackPoint: any): number | null {\n  return (\n    trackPoint.extensions?.[0]?.[\"gpxtpx:TrackPointExtension\"]?.[0]?.[\n      \"gpxtpx:hr\"\n    ] ?? null\n  );\n}\n\nfunction getCadenceFromTrackPoint(trackPoint: any): number | null {\n  return (\n    trackPoint.extensions?.[0]?.[\"gpxtpx:TrackPointExtension\"]?.[0]?.[\n      \"gpxtpx:cad\"\n    ] ?? null\n  );\n}\n\nfunction getCoordinateFromTrackPoint(\n  trackPoint: any\n): [latitude: number, longitude: number] {\n  return [trackPoint.lat, trackPoint.lon];\n}\n\nfunction getPowerFromTrackPoint(trackPoint: any): number | null {\n  return trackPoint.extensions?.[0]?.power ?? null;\n}\n\nfunction getElevationFromTrackPoint(trackPoint: any): number | null {\n  return trackPoint.ele ?? null;\n}\n","import { Button } from \"@mui/material\";\nimport { ChangeEvent, useRef } from \"react\";\nimport styles from \"./LoadButton.module.scss\";\nimport { loadGPXFile } from \"./services/loaders/GPXLoader\";\nimport { GPXData } from \"./types\";\n\ninterface Props {\n  addGPXData: (data: GPXData) => void;\n}\n\nexport function LoadButton({ addGPXData }: Props) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files) {\n      return;\n    }\n\n    for (let i = 0; i < event.target.files.length; i++) {\n      try {\n        const gpxData = await parseFile(event.target.files[i]);\n        addGPXData(gpxData);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  };\n\n  const handleButtonClick = () => {\n    if (!inputRef.current) {\n      return;\n    }\n    inputRef.current.value = \"\";\n    inputRef.current.click();\n  };\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        accept=\".gpx\"\n        ref={inputRef}\n        multiple\n        onChange={handleFileChange}\n        className={styles.Input}\n      />\n      <Button variant=\"contained\" onClick={handleButtonClick}>\n        Load GPX\n      </Button>\n    </>\n  );\n}\n\nasync function parseFile(file: File): Promise<GPXData> {\n  if (!file.name.endsWith(\".gpx\")) {\n    throw new Error(\"Unsupported file type\");\n  }\n\n  return await loadGPXFile(file);\n}\n","import { Button } from \"@mui/material\";\nimport formatISO from \"date-fns/formatISO\";\nimport { sortBy, uniq } from \"lodash\";\nimport builder from \"xmlbuilder\";\nimport { GPXData } from \"./types\";\nimport FileSaver from \"file-saver\";\nimport slugify from \"slugify\";\n\ninterface Props {\n  data: GPXData;\n}\n\nexport function SaveButton({ data }: Props) {\n  const handleClick = () => {\n    const fileData = createXML(data);\n    FileSaver.saveAs(\n      new Blob([fileData], { type: \"text/xml\" }),\n      `${slugify(data.name || \"export\")}.gpx`\n    );\n  };\n\n  return (\n    <Button variant=\"contained\" onClick={handleClick}>\n      Save\n    </Button>\n  );\n}\n\nfunction createXML({\n  name,\n  type,\n  coordinate,\n  cadence,\n  elevation,\n  heartrate,\n  power,\n}: GPXData): string {\n  const timestamps = sortBy(\n    uniq(\n      [\n        coordinate,\n        ...(cadence ? [cadence] : []),\n        ...(elevation ? [elevation] : []),\n        ...(heartrate ? [heartrate] : []),\n        ...(power ? [power] : []),\n      ].flatMap((stream) => stream.data.map((d) => d.timestamp))\n    )\n  );\n  const firstTimestamp = Math.min(...timestamps);\n\n  const obj = {\n    gpx: {\n      \"@creator\": \"GPX Juggler\",\n      \"@xmlns\": \"http://www.topografix.com/GPX/1/1\",\n      \"@version\": \"1.1\",\n      \"xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\n      \"@xsi:schemaLocation\": [\n        \"http://www.topografix.com/GPX/1/1\",\n        \"http://www.topografix.com/GPX/1/1/gpx.xsd http://www.garmin.com/xmlschemas/GpxExtensions/v3\",\n        \"http://www.garmin.com/xmlschemas/GpxExtensionsv3.xsd\",\n        \"http://www.garmin.com/xmlschemas/TrackPointExtension/v1\",\n        \"http://www.garmin.com/xmlschemas/TrackPointExtensionv1.xsd\",\n      ].join(\" \"),\n      metadata: {\n        time: { \"#text\": formatISO(firstTimestamp * 1_000) },\n      },\n      trk: {\n        name: { \"#text\": name },\n        type: { \"#text\": type },\n      },\n      trkseg: {\n        trkpt: timestamps.map((timestamp) => ({\n          ...(coordinate.data.find((d) => d.timestamp === timestamp)\n            ? {\n                \"@lat\": coordinate.data.find((d) => d.timestamp === timestamp)!\n                  .value[0],\n                \"@lon\": coordinate.data.find((d) => d.timestamp === timestamp)!\n                  .value[1],\n              }\n            : {}),\n          time: { \"#text\": formatISO(timestamp * 1_000) },\n          ...(elevation?.data.find((d) => d.timestamp === timestamp)\n            ? {\n                ele: {\n                  \"#text\": elevation.data.find(\n                    (d) => d.timestamp === timestamp\n                  )!.value,\n                },\n              }\n            : {}),\n          extensions: {\n            ...(power?.data.find((d) => d.timestamp === timestamp)\n              ? {\n                  power: {\n                    \"#text\": power.data.find((d) => d.timestamp === timestamp)!\n                      .value,\n                  },\n                }\n              : {}),\n\n            \"gpxtpx:TrackPointExtension\": {\n              ...(heartrate?.data.find((d) => d.timestamp === timestamp)\n                ? {\n                    \"gpxtpx:hr\": {\n                      \"#text\": heartrate.data.find(\n                        (d) => d.timestamp === timestamp\n                      )!.value,\n                    },\n                  }\n                : {}),\n\n              ...(cadence?.data.find((d) => d.timestamp === timestamp)\n                ? {\n                    \"gpxtpx:cad\": {\n                      \"#text\": cadence.data.find(\n                        (d) => d.timestamp === timestamp\n                      )!.value,\n                    },\n                  }\n                : {}),\n            },\n          },\n        })),\n      },\n    },\n  };\n  return builder.create(obj).end({ pretty: true });\n}\n","import { AppBar, Container, Stack, Toolbar, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { Editor } from \"./Editor\";\nimport { LoadButton } from \"./LoadButton\";\nimport { SaveButton } from \"./SaveButton\";\nimport { useStore } from \"./store\";\n\nexport function App() {\n  const addFile = useStore((s) => s.addFile);\n\n  return (\n    <>\n      <AppBar position=\"static\" sx={{ mb: 1 }}>\n        <Toolbar>\n          <Container>\n            <Typography variant=\"h6\">GPX Juggler</Typography>\n          </Container>\n        </Toolbar>\n      </AppBar>\n      <Container>\n        <Stack spacing={2} direction=\"column\">\n          <Stack spacing={2} direction=\"row\">\n            <LoadButton addGPXData={addFile} />\n            <SaveButton\n              data={{\n                name: \"Test\",\n                type: 5,\n                coordinate: {\n                  type: \"coordinate\",\n                  data: [\n                    {\n                      timestamp: 0,\n                      value: [0, 0],\n                    },\n                  ],\n                },\n              }}\n            />\n          </Stack>\n          <Editor />\n        </Stack>\n      </Container>\n    </>\n  );\n}\n","import CssBaseline from \"@mui/material/CssBaseline\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}